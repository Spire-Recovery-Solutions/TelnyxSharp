using TelnyxSharp.Numbers.Models.PhoneNumbers.Requests.PhoneNumberReservations;
using TelnyxSharp.Numbers.Models.PhoneNumbers.Requests.PhoneNumberSearch;
using TelnyxSharp.Enums;
using Xunit;
using Xunit.Abstractions;

namespace TelnyxSharp.Tests.Numbers
{
    [Trait("Category", "Integration")]
    [Trait("Module", "Numbers")]
    [Trait("Cost", "PotentialCharges")]
    public class PhoneNumberReservationsTests : NumberManagementTestBase
    {
        public PhoneNumberReservationsTests(ITestOutputHelper output) : base(output)
        {
        }

        [Fact]
        public async Task CreateReservation_WithAvailableNumbers_CreatesReservation()
        {
            SkipIfNotIntegrationTest();
            SkipIfCostTestsNotAllowed(); // Reservations may incur holding fees!

            // First, search for available numbers to reserve
            var searchRequest = new AvailablePhoneNumbersRequest
            {
                CountryCode = TestCountry,
                NationalDestinationCode = int.Parse(TestAreaCode),
                Limit = 2
            };

            var searchResponse = await Client.PhoneNumbers.PhoneNumberSearch.AvailableNumbers(searchRequest);

            if (searchResponse?.Data?.Count == 0)
            {
                Output.WriteLine("No available numbers found for reservation");
                return;
            }

            var phoneNumbersToReserve = searchResponse.Data
                .Take(Math.Min(2, searchResponse.Data.Count))
                .Select(n => new CreateNumberReservationPhoneNumber { PhoneNumber = n.PhoneNumber })
                .ToList();

            Output.WriteLine($"Attempting to reserve {phoneNumbersToReserve.Count} numbers");
            Output.WriteLine("WARNING: This may incur reservation fees!");

            var reservationRequest = new CreateNumberReservationRequest
            {
                PhoneNumbers = phoneNumbersToReserve,
                CustomerReference = $"{TestPrefix}reservation_{DateTime.UtcNow:yyyyMMddHHmmss}"
            };

            var response = await Client.PhoneNumbers.PhoneNumberReservations.Create(reservationRequest);

            Assert.NotNull(response);
            Assert.NotNull(response.Data);
            Assert.NotNull(response.Data.Id);
            
            ReservationsToCleanup.Add(response.Data.Id);

            Output.WriteLine($"Created reservation: {response.Data.Id}");
            Output.WriteLine($"  Status: {response.Data.Status}");
            Output.WriteLine($"  Expires At: {response.Data.ExpiresAt}");
            Output.WriteLine($"  Customer Reference: {response.Data.CustomerReference}");
            
            if (response.Data.PhoneNumbers != null)
            {
                foreach (var phoneNumber in response.Data.PhoneNumbers)
                {
                    Output.WriteLine($"  Reserved Number: {phoneNumber.PhoneNumber}, Status: {phoneNumber.Status}");
                }
            }
        }

        [Fact]
        public async Task ListReservations_ReturnsReservations()
        {
            SkipIfNotIntegrationTest();
            // This test is SAFE - only lists existing reservations

            var request = new ListNumberReservationsRequest
            {
                PageSize = 10,
            };

            var response = await Client.PhoneNumbers.PhoneNumberReservations.List(request);

            Assert.NotNull(response);
            Assert.NotNull(response.Data);

            if (response.Data is List<NumberReservationData> reservations)
            {
                Output.WriteLine($"Found {reservations.Count} reservations");

                foreach (var reservation in reservations)
                {
                    Output.WriteLine($"Reservation: {reservation.Id}");
                    Output.WriteLine($"  Status: {reservation.Status}");
                    Output.WriteLine($"  Created: {reservation.CreatedAt}");
                    Output.WriteLine($"  Updated: {reservation.UpdatedAt}");
                    Output.WriteLine($"  Phone Numbers Count: {reservation.PhoneNumbers?.Count ?? 0}");
                }
            }
        }

        [Fact]
        public async Task GetReservation_WithValidId_ReturnsReservationDetails()
        {
            SkipIfNotIntegrationTest();
            // This test is SAFE - only reads reservation details

            // First, get list of reservations to find a valid ID
            var listRequest = new ListNumberReservationsRequest { PageSize = 1 };
            var listResponse = await Client.PhoneNumbers.PhoneNumberReservations.List(listRequest);

            if (listResponse?.Data?.Count == 0)
            {
                Output.WriteLine("No reservations available for testing");
                return;
            }

            var reservationId = listResponse.Data.First().Id;

            var response = await Client.PhoneNumbers.PhoneNumberReservations.Get(reservationId);

            Assert.NotNull(response);
            Assert.NotNull(response.Data);
            Assert.Equal(reservationId, response.Data.Id);

            Output.WriteLine($"Retrieved reservation: {response.Data.Id}");
            Output.WriteLine($"  Status: {response.Data.Status}");
            Output.WriteLine($"  Created: {response.Data.CreatedAt}");
            Output.WriteLine($"  Updated: {response.Data.UpdatedAt}");
            
            if (response.Data.PhoneNumbers != null)
            {
                foreach (var phoneNumber in response.Data.PhoneNumbers)
                {
                    Output.WriteLine($"  Phone Number: {phoneNumber.PhoneNumber}");
                    Output.WriteLine($"    Status: {phoneNumber.Status}");
                }
            }
        }

        [Fact]
        public async Task ExtendReservation_ExtendsExpirationTime()
        {
            SkipIfNotIntegrationTest();
            SkipIfCostTestsNotAllowed(); // Extending may incur additional fees!

            // First create a reservation to extend
            var searchRequest = new AvailablePhoneNumbersRequest
            {
                CountryCode = TestCountry,
                NationalDestinationCode = int.Parse(TestAreaCode),
                Limit = 1
            };

            var searchResponse = await Client.PhoneNumbers.PhoneNumberSearch.AvailableNumbers(searchRequest);

            if (searchResponse?.Data?.Count == 0)
            {
                Output.WriteLine("No available numbers found for reservation");
                return;
            }

            var createRequest = new CreateNumberReservationRequest
            {
                PhoneNumbers = new List<CreateNumberReservationPhoneNumber>
                {
                    new CreateNumberReservationPhoneNumber { PhoneNumber = searchResponse.Data.First().PhoneNumber }
                },
                CustomerReference = $"{TestPrefix}extend_test"
            };

            var createResponse = await Client.PhoneNumbers.PhoneNumberReservations.Create(createRequest);
            var reservationId = createResponse.Data.Id;
            var originalExpiration = createResponse.Data.UpdatedAt;
            
            ReservationsToCleanup.Add(reservationId);

            Output.WriteLine($"Created reservation {reservationId}, expires at {originalExpiration}");
            Output.WriteLine("WARNING: About to extend reservation - may incur additional fees!");

            var extendResponse = await Client.PhoneNumbers.PhoneNumberReservations.Extend(reservationId);

            Assert.NotNull(extendResponse);
            Assert.NotNull(extendResponse.Data);
            Assert.Equal(reservationId, extendResponse.Data.Id);
            
            // Verify reservation was extended (timestamp updated)
            if (originalExpiration.HasValue && extendResponse.Data.UpdatedAt.HasValue)
            {
                Assert.True(extendResponse.Data.UpdatedAt >= originalExpiration, 
                    "Updated timestamp should be later than or equal to original");
                
                Output.WriteLine($"Extended reservation, updated at {extendResponse.Data.UpdatedAt}");
            }
        }

        [Fact]
        public async Task ListReservations_WithFilters_ReturnsFilteredResults()
        {
            SkipIfNotIntegrationTest();
            // This test is SAFE - only lists with filters

            var request = new ListNumberReservationsRequest
            {
                PageSize = 10
            };

            var response = await Client.PhoneNumbers.PhoneNumberReservations.List(request);

            Assert.NotNull(response);
            Assert.NotNull(response.Data);

            if (response.Data is List<NumberReservationData> reservations)
            {
                Output.WriteLine($"Found {reservations.Count} reservations");

                foreach (var reservation in reservations)
                {
                    Output.WriteLine($"Reservation: {reservation.Id}, Status: {reservation.Status}");
                }
            }
        }

        [Fact]
        public async Task ReservationExpiration_TracksExpirationTime()
        {
            SkipIfNotIntegrationTest();
            SkipIfCostTestsNotAllowed(); // This creates a reservation!

            // Create a reservation and verify expiration is set
            var searchRequest = new AvailablePhoneNumbersRequest
            {
                CountryCode = TestCountry,
                NationalDestinationCode = int.Parse(TestAreaCode),
                Limit = 1
            };

            var searchResponse = await Client.PhoneNumbers.PhoneNumberSearch.AvailableNumbers(searchRequest);

            if (searchResponse?.Data?.Count == 0)
            {
                Output.WriteLine("No available numbers found");
                return;
            }

            var request = new CreateNumberReservationRequest
            {
                PhoneNumbers = new List<CreateNumberReservationPhoneNumber>
                {
                    new CreateNumberReservationPhoneNumber { PhoneNumber = searchResponse.Data.First().PhoneNumber }
                }
            };

            var response = await Client.PhoneNumbers.PhoneNumberReservations.Create(request);

            Assert.NotNull(response?.Data?.CreatedAt);
            Assert.True(response.Data.CreatedAt <= DateTime.UtcNow, 
                "Creation time should be in the past or present");
            
            ReservationsToCleanup.Add(response.Data.Id);

            Output.WriteLine($"Reservation created at {response.Data.CreatedAt}");
            Output.WriteLine($"Reservation will expire automatically");
        }
    }
}